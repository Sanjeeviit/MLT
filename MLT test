{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sanjeeviit/MLT/blob/main/MLT%20test\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Instructions\n",
        "\n",
        "- There are $17$ NAT questions with marks distributed as $1 \\times 2 + 16 \\times 3 = 50$.\n",
        "- Answers to all questions are going to be integers.\n",
        "- Solve the problem in the colab and enter the answer in the portal.\n",
        "- Always run the data-cell before running the solution cell.\n",
        "- In questions where a data-matrix $\\mathbf{X}$ and label-vector $\\mathbf{y}$ are mentioned, the data-cell will have the corresponding entries as `X` and `y`.\n",
        "- All other vectors, matrices and scalars necessary for solving the problem will be given in the data-cell. They will have the same name as the ones mentioned in the problem statement."
      ],
      "metadata": {
        "id": "t3Nnu-W2QRde"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Notation\n",
        "\n",
        "- The data-matrix in all problems will be of shape $d \\times n$, where $d$ is the number of features and $n$ is the number of data-points.\n",
        "- If $\\mathbf{x} = (1, 2, 3)$ is a vector, $1, 2$ and $3$ are termed the components of $\\mathbf{x}$. The sum of the components of $\\mathbf{x}$ is $6$.\n",
        "- The norm of a vector $\\mathbf{x}$ is the Euclidean norm ($L_2$) by default. This is the only norm used in this exam.\n",
        "- All vectors will be represented as one-dimensional NumPy arrays. All matrices will be represented as two-dimensional NumPy arrays."
      ],
      "metadata": {
        "id": "OlT8_lBECghZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Useful functions\n",
        "\n",
        "- `np.linalg.norm` can be used to compute the norm of a vector.\n",
        "- Use the question mark to get more info about a function. For example, `np.linalg.norm?` will give you more details about this method.\n",
        "- `round` is a function that can be used to find the nearest integer. For example, `round(1.2) == 1` and `round(1.9) == 2`."
      ],
      "metadata": {
        "id": "XR6-XL-Pcz-E"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "G9xfb6EDlxIy"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question-1 [2 marks]\n",
        "\n",
        "$\\mathbf{X}$ is a data-matrix. If $\\boldsymbol{\\mu}$ is the mean of the data-points, find the norm of $\\boldsymbol{\\mu}$ and enter the nearest integer as your answer."
      ],
      "metadata": {
        "id": "tZ1jfgAunSbW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# DATA CELL\n",
        "# DO NOT EDIT THIS\n",
        "rng = np.random.default_rng(seed = 1001)\n",
        "d = rng.integers(2, 10)\n",
        "n = rng.integers(40, 50)\n",
        "X = rng.integers(-5, 10, (d, n))"
      ],
      "metadata": {
        "id": "VZlO9j6Jnyww"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Solution\n",
        "# Run the data cell before running this\n",
        "mu = np.mean(X, axis = 1)\n",
        "mu_norm = np.linalg.norm(mu)\n",
        "print(round(mu_norm))\n"
      ],
      "metadata": {
        "id": "v2MDy_FHoLx-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "51945841-cc7c-4dd4-b35a-3c649d7a7106"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question-2 [3 marks]\n",
        "\n",
        "$\\mathbf{X}$ is a data-matrix. Find the number of data-points whose norm is at least $k$."
      ],
      "metadata": {
        "id": "hlD-5BqllMj7"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "cHRVHV1xlCme"
      },
      "outputs": [],
      "source": [
        "# DATA CELL\n",
        "# DO NOT EDIT THIS\n",
        "rng = np.random.default_rng(seed = 1002)\n",
        "k = rng.integers(10, 20)\n",
        "d = rng.integers(5, 10)\n",
        "n = rng.integers(50, 100)\n",
        "X = rng.integers(-10, 10, (d, n))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Solution\n",
        "# Run the data cell before running this\n",
        "count = 0\n",
        "for i in range(n):\n",
        "  if np.linalg.norm(X[:, i]) >= k:\n",
        "    count += 1\n",
        "print(count)"
      ],
      "metadata": {
        "id": "-N-NZ085mA-1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6ab2655c-8c7d-4fb9-b395-9030c4ad04d5"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "17\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question-3 [3 marks]\n",
        "\n",
        "Consider a matrix $\\mathbf{A}$ of shape $m \\times n$. Find the trace of the matrix $\\mathbf{A}^T \\mathbf{A}$, where the trace is the sum of the diagonal elements. The diagonal here is the main diagonal (top-left to bottom-right)."
      ],
      "metadata": {
        "id": "RXl92AUGocO_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# DATA CELL\n",
        "# DO NOT EDIT THIS\n",
        "rng = np.random.default_rng(seed = 1003)\n",
        "m, n = rng.integers(50, 100, 2)\n",
        "A = rng.integers(-1, 2, (m, n))"
      ],
      "metadata": {
        "id": "Jeit_vadozZx"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Solution\n",
        "# Run the data cell before running this\n",
        "trace = np.trace(A.T @ A)\n",
        "print(trace)"
      ],
      "metadata": {
        "id": "cwIolxUOpPy2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "57e8a6e5-7583-4ae6-9ecf-99b1fc135679"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2517\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question-4 [3 marks]\n",
        "\n",
        "Consider the curves:\n",
        "\n",
        "$$\n",
        "\\begin{aligned}\n",
        "y &= xe^{x}\\\\\\\\\n",
        "y &= \\sin(10 \\pi x)\n",
        "\\end{aligned}\n",
        "$$\n",
        "\n",
        "Find the number of points at which these two curves intersect in the interval $0.15 \\leqslant x \\leqslant 0.5$."
      ],
      "metadata": {
        "id": "WVaAy1i8piTh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solution\n",
        "import matplotlib.pyplot as plt\n",
        "x = np.linspace(0.15, 0.5, 100)\n",
        "y1 = x * np.exp(x)\n",
        "y2 = np.sin(10 * np.pi * x)\n",
        "count = 0\n",
        "for i in range(len(x)):\n",
        "  if y1[i] == y2[i]:\n",
        "    count += 1\n",
        "print(count)\n",
        "plt.scatter(x, y1,color='red',linewidth = 0.2)\n",
        "plt.scatter(x, y2,color ='black',linewidths= 0.8)\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('y')\n",
        "plt.title('Curves')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "L2SZuyuuptkx",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "outputId": "21cd629b-ca98-4943-e007-841e699bbcc9"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question-5 [3 marks]\n",
        "\n",
        "Consider the system of equations $\\mathbf{Ax} = \\mathbf{b}$, where:\n",
        "\n",
        "$$\n",
        "\\mathbf{A} = \\begin{bmatrix}\n",
        "1 & 2 & -1 & 3\\\\\n",
        "0 & 1 & 2 & -1\\\\\n",
        "1 & -2 & 3 & 1\\\\\n",
        "0 & -1 & -1 & 2\n",
        "\\end{bmatrix}, \\quad \\mathbf{b} = \\begin{bmatrix}\n",
        "1\\\\\n",
        "2\\\\\n",
        "-1\\\\\n",
        "0\n",
        "\\end{bmatrix}\n",
        "$$\n",
        "\n",
        "If $A$ is invertible, find the solution to this system, and enter the sum of the components of the solution as the answer. Your answer should be an integer."
      ],
      "metadata": {
        "id": "ZdSKq7Koq2hk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solution\n",
        "A = np.array([[1, 2, -1, 3],\n",
        "              [0, 1, 2, -1],\n",
        "              [1, -2, 3, 1],\n",
        "              [0, -1, -1, 2]])\n",
        "b = np.array([1, 2, -1, 0])\n",
        "x = np.linalg.solve(A, b)\n",
        "print(round(np.sum(x)))"
      ],
      "metadata": {
        "id": "8nPU1UrxrQK-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5ceb97f3-2b6c-4a88-de73-7e36fe58b20e"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question-6 [3 marks]\n",
        "\n",
        "Let $\\mathbf{w}$ be the weight vector of a linear classifier trained on a dataset for a binary classification problem with data-matrix $\\mathbf{X}$ and true label vector $\\mathbf{y}$. The predicted label for a data-point $\\mathbf{x}$ defined as:\n",
        "\n",
        "$$\n",
        "\\widehat{y} = \\begin{cases}\n",
        "1,& \\mathbf{w}^{T} \\mathbf{x} \\geqslant 0,\\\\\n",
        "0,& \\text{otherwise}\n",
        "\\end{cases}\n",
        "$$\n",
        "\n",
        "Find the predicted label vector for the given dataset and enter the sum of the components of the predicted label vector as the answer.\n",
        "\n"
      ],
      "metadata": {
        "id": "tPLSPiXEsEVn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# DATA CELL\n",
        "# DO NOT EDIT THIS\n",
        "rng = np.random.default_rng(seed = 1006)\n",
        "d = rng.integers(3, 6)\n",
        "n = rng.integers(40, 60)\n",
        "if n % 2 != 0: n += 1\n",
        "X = rng.uniform(-2, 2, (d, n))\n",
        "y = np.concatenate(\n",
        "    (np.ones(n // 2),\n",
        "    np.zeros(n // 2))\n",
        ")\n",
        "w = rng.uniform(-5, 5, d)"
      ],
      "metadata": {
        "id": "4X-n4sXnDdeD"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Solution\n",
        "# Run the data cell before running this\n",
        "y_hat = np.dot(w.T, X) >= 0\n",
        "print(round(np.sum(y_hat)))"
      ],
      "metadata": {
        "id": "EzRf97SlEdc2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "74ebac48-197e-4186-974f-98849d3fa2f1"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "19\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Common data for questions (7) to (10)\n",
        "\n",
        "Consider the following dataset for a binary classification problem. The data-matrix $\\mathbf{X}$ and the label vector $\\mathbf{y}$ are given below."
      ],
      "metadata": {
        "id": "7s-1nc3YFQq4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# DATA CELL\n",
        "# DO NOT EDIT THIS\n",
        "X = np.array([\n",
        "    [2, 2, 2, 3, -2, -2, -5, -3],\n",
        "    [0, 1, -1, 0, 0, -3, 3, -1]\n",
        "])\n",
        "y = np.array(\n",
        "    [-1, -1, -1, -1, 1, 1, 1, 1]\n",
        ")"
      ],
      "metadata": {
        "id": "8WSXne4hFtNU"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question-7 [3 marks]\n",
        "\n",
        "Train a perceptron algorithm on this dataset. Cycle through the data-points from left to right, that is, $i = 0$ to $i = n - 1$. Make sure to strictly follow this cycle. If you make an update at data-point $i$, proceed to data-point $i + 1$ in the next iteration. Once you reach $n - 1$, cycle back to $0$.\n",
        "\n",
        "\n",
        "Find the sum of the components of the weight vector and enter the nearest integer as your answer."
      ],
      "metadata": {
        "id": "YzVNgtqKJsE_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solution\n",
        "# Run the data cell before running this\n",
        "perceptron = np.zeros(X.shape[0] + 1)\n",
        "X = np.insert(X, 0, 1, axis = 0)\n",
        "for i in range(X.shape[1]):\n",
        "  if np.dot(perceptron, X[:, i]) * y[i] <= 0:\n",
        "    perceptron += y[i] * X[:, i]\n",
        "print(round(np.sum(perceptron)))\n",
        "\n"
      ],
      "metadata": {
        "id": "sxoAcslRJ-Iv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "54a56948-7d4a-4968-af9c-ef03c4518cac"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question-8 [3 marks]\n",
        "\n",
        "In the context of hard-margin SVM, find the optimal $\\boldsymbol{\\alpha}^{*}$ by solving the following dual optimization problem.\n",
        "\n",
        "$$\n",
        "\\begin{equation*}\n",
        "\\underset{\\boldsymbol{\\alpha} \\geqslant \\mathbf{0}}{\\max}\\ \\ \\  \\  \\boldsymbol{\\alpha}^{T}\\mathbf{1} -\\frac{1}{2}\\boldsymbol{\\alpha}^{T}\\mathbf{Y}^{T}\\mathbf{X}^{T}\\mathbf{XY} \\boldsymbol{\\alpha}\n",
        "\\end{equation*}\n",
        "$$\n",
        "\n",
        "If the sum of the components of $\\boldsymbol{\\alpha}^{*}$ is $s$, find $\\cfrac{1}{s}$ and enter the nearest integer to $\\cfrac{1}{s}$ as the answer."
      ],
      "metadata": {
        "id": "1GBq4yDPLLt-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solution\n",
        "# Run the data cell before running this\n",
        "! pip install scikit-learn\n",
        "import numpy as np\n",
        "from sklearn import svm\n",
        "X=np.array([[2,2,2,3,-2,-2,-5,-3],[0,1,-1,0,0,-3,3,-1]])\n",
        "y=np.array([-1,-1,-1,-1,1,1,1,1])\n",
        "a = np.zeros(X.shape[0] + 1)\n",
        "b = np.ones(X.shape[1])\n",
        "clf = svm.SVC(kernel ='linear')\n",
        "clf.fit(X.T, y)\n",
        "alpha = clf.dual_coef_[0]\n",
        "print(round(np.sum(alpha)))"
      ],
      "metadata": {
        "id": "akscrU-gNktD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "59adb2f4-a663-4891-e990-c3e495d15c70"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.5.2)\n",
            "Requirement already satisfied: numpy>=1.19.5 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.26.4)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.13.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n",
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question-9 [3 marks]\n",
        "\n",
        "Find the optimal weight vector $\\mathbf{w}^{*}$. If the sum of the components of $\\mathbf{w}^{*}$ is $s$, find $\\cfrac{1}{s}$ and enter the nearest integer to $\\cfrac{1}{s}$ as the answer."
      ],
      "metadata": {
        "id": "BwXCnOmfPGJO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solution\n",
        "w = np.zeros(X.shape[0])\n",
        "for i in range(X.shape[1]):\n",
        "  w += y[i] * X[:, i]\n",
        "print(round(np.sum(w)))"
      ],
      "metadata": {
        "id": "6rIsgdJHO7-f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e9939b7c-edb0-491e-b206-3f2f01482a94"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-22\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question-10 [3 marks]\n",
        "\n",
        "Find the number of support vectors."
      ],
      "metadata": {
        "id": "KuQwLBPtPnsq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solution\n",
        "print(np.sum(clf.n_support_))"
      ],
      "metadata": {
        "id": "USTjEFyYPqxG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "89fdffff-1ba8-45d7-f6c2-8e489db6ccf6"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Common data for questions (11) and (12)\n",
        "\n",
        "Consider a data-matrix $\\mathbf{X}$. Mean center it and perform linear PCA."
      ],
      "metadata": {
        "id": "UMtCcCP8QfUz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# DATA CELL\n",
        "# DO NOT EDIT THIS\n",
        "X = np.array([\n",
        "    [7, 5, -6, -11, 14.4, -2.8],\n",
        "    [10.5, 7.5, -9, -16.5, 21.6, -4.2],\n",
        "    [21, 15, -18, -33, 43.2, -8.4]\n",
        "]).astype(np.float64)"
      ],
      "metadata": {
        "id": "mt7Hrow9vJzH"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Solution\n",
        "# Run the data cell before running this\n",
        "rng = np.random.default_rng(seed = 1000)\n",
        "eigenvalues, eigenvectors = np.linalg.eigh(X @ X.T)\n",
        "idx = np.argsort(eigenvalues)[::-1]\n",
        "eigenvalues = eigenvalues[idx]\n",
        "eigenvectors = eigenvectors[:, idx]\n",
        "eigenvalues = np.flip(eigenvalues)\n",
        "eigenvectors = np.flip(eigenvectors, axis = 1)\n",
        "print('eigenvalues:',eigenvalues)\n",
        "print('eigenvectors:',eigenvectors)\n",
        "print(eigenvectors)\n",
        "plt.scatter(X[0, :], X[1, :], color = 'blue')\n",
        "plt.axhline(y = 0, color = 'black', linestyle = '--')\n",
        "plt.axvline(x = 0, color = 'black', linestyle = '--')\n",
        "plt.axis ='equal'\n",
        "\n"
      ],
      "metadata": {
        "id": "ZB5kUNagx_kz",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 552
        },
        "outputId": "41594d33-4ab5-441e-8920-0a704ec342c0"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "eigenvalues: [-9.14111545e-13  4.61684274e-15  5.46595000e+03]\n",
            "eigenvectors: [[ 0.95590393 -0.067934    0.28571429]\n",
            " [-0.19085892 -0.88311913  0.42857143]\n",
            " [-0.22320518  0.46420423  0.85714286]]\n",
            "[[ 0.95590393 -0.067934    0.28571429]\n",
            " [-0.19085892 -0.88311913  0.42857143]\n",
            " [-0.22320518  0.46420423  0.85714286]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question-11 [3 marks]\n",
        "\n",
        "If the first PC is $\\mathbf{w}_1$, let the sum of the components of $\\mathbf{w}_1$ be $a$. Find the absolute value of $7a$ and enter the nearest integer as your answer."
      ],
      "metadata": {
        "id": "Tgw2B-EfwL9b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solution\n",
        "a = np.sum(eigenvectors[:, 0])\n",
        "print(round(np.abs(7 * a)))"
      ],
      "metadata": {
        "id": "QI427kObwVdW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e97f25c3-9707-489e-d295-94172fb2966e"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question-12 [3 marks]\n",
        "\n",
        "Find the variance along the first PC. Enter the nearest integer as your answer."
      ],
      "metadata": {
        "id": "p1DduPLix1An"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solution\n",
        "b= np.var(X @ eigenvectors[:, 0]).reshape(n, -1)\n",
        "print(round(b))\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "_EpZ6ymUx72B",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 228
        },
        "outputId": "077b68fb-4aac-4a74-9d03-69b288c31a5d"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 3 is different from 6)",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-54-2ae5eb6643f7>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Solution\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mb\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m \u001b[0;34m@\u001b[0m \u001b[0meigenvectors\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mround\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 3 is different from 6)"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question-13 [3 marks]\n",
        "\n",
        "Find the sum of the variances along the second and third PC. Enter the nearest integer as your answer."
      ],
      "metadata": {
        "id": "820TD3T2yU6u"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solution\n",
        "c = np.var(X @ eigenvectors[:, 1]).reshape(n, -1) + np.var(X @ eigenvectors[:, 2]).reshape(n, -1)\n",
        "print(round(np.sum(c)))"
      ],
      "metadata": {
        "id": "xHDljAql3YIW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 193
        },
        "outputId": "d0d965dc-2983-4777-8b25-5acf44ef8d7b"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 3 is different from 6)",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-56-0de33eb8370c>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Solution\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m \u001b[0;34m@\u001b[0m \u001b[0meigenvectors\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m \u001b[0;34m@\u001b[0m \u001b[0meigenvectors\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mround\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 3 is different from 6)"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Common data for questions (14) to (16)\n",
        "\n",
        "Consider a dataset $\\mathbf{X}$ for a clustering problem. Start with the initial means as $\\boldsymbol{\\mu}_1 = (2, 3, 5)$ and $\\boldsymbol{\\mu}_2 = (-3, -5, -7)$ and run K-means with $k = 2$.\n",
        "\n",
        "**Note**: Set `mu_1` and `mu_2` as `np.float64` arrays. You can set `dtype = np.float64` while creating the array. Use `np.array?` if you are still unsure about this. This is important for your final answer to match the ones we have configured.\n"
      ],
      "metadata": {
        "id": "ChxnTNlDydTd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# DATA CELL\n",
        "# DO NOT EDIT THIS\n",
        "X = np.array([\n",
        "    [-8.2, 3.2, -5.1, 4., -7, 8.1, -2],\n",
        "    [-10.1, 4.1, -3.3, 2., -5, 6.2, -5],\n",
        "    [-3.4, 4.9, -3, 2., -5, 6.5, -5.3]\n",
        "])"
      ],
      "metadata": {
        "id": "WvexSrlzz20i"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Solution\n",
        "# Run the data cell before running this\n",
        "mu_1 = np.array([2, 3, 5], dtype = np.float64)\n",
        "mu_2 = np.array([-3, -5, -7], dtype = np.float64)\n",
        "k= 2\n",
        "k_means = np.zeros(X.shape[1])\n",
        "for i in range(k):\n",
        "  for j in range(X.shape[1]):\n",
        "    k_means[j] = np.linalg.norm(X[:, j] - mu_1)\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "mLXVo6S-0T8A"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question-14 [3 marks]\n",
        "\n",
        "Find the norm of the final mean $\\boldsymbol{\\mu}_1$. Enter the nearest integer as your answer.\n",
        "\n"
      ],
      "metadata": {
        "id": "IghtGUgx0UhS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solution\n",
        "mu_1= np.array([2, 3, 5], dtype = np.float64)\n",
        "mu_2= np.array([-3, -5, -7], dtype = np.float64)\n",
        "print(round(np.linalg.norm(mu_1)))"
      ],
      "metadata": {
        "id": "Ii_9Pq-m7fLu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4a10f261-a268-4ab6-eac1-8b13f2fc4a2c"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question-15 [3 marks]\n",
        "\n",
        "Find the norm of the final mean $\\boldsymbol{\\mu}_2$. Enter the nearest integer as your answer.\n",
        "\n"
      ],
      "metadata": {
        "id": "qcdc2zqE7jZc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solution\n",
        "print(round(np.linalg.norm(mu_2)))"
      ],
      "metadata": {
        "id": "Zo7Z9GZX7mTY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "88a7e6ee-2b3e-4fe8-e32c-2c2d9b06116b"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question-16 [3 marks]\n",
        "\n",
        "Find the cluster to which the data-point $(0, 1, 2)$ belongs. Enter $1$ if it is closer to $\\boldsymbol{\\mu}_1$ than $\\boldsymbol{\\mu}_2$ and $2$ otherwise."
      ],
      "metadata": {
        "id": "tRYQF6D272ul"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solution\n",
        "clu_1 = np.linalg.norm(np.array([0, 1, 2]) - mu_1)\n",
        "clu_2 = np.linalg.norm(np.array([0, 1, 2]) - mu_2)\n",
        "if clu_1 < clu_2:\n",
        "  print(1)\n",
        "else:\n",
        "  print(2)\n"
      ],
      "metadata": {
        "id": "TiPBhf7b8Asz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e6a5e5ae-09a2-47c4-df52-afada1e81ffb"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question-17 [3 marks]\n",
        "\n",
        "Fit a linear regression model on the dataset $(\\mathbf{X}, \\mathbf{y})$ and find the optimal weight vector $\\mathbf{w}^{*}$ using the normal equations. Enter the nearest integer to the sum of the components of $\\mathbf{w}^{*}$ as the answer."
      ],
      "metadata": {
        "id": "MDHEC5gb8bbQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# DATA CELL\n",
        "# DO NOT EDIT THIS\n",
        "X = np.array([\n",
        "    [1., -1., 3., -2., 1.],\n",
        "    [0., -2., 1., 0., 3.],\n",
        "    [-2., 1., 0., 1., 2.],\n",
        "    [1., -2., 3., -1., 4.]\n",
        "])\n",
        "y = np.array(\n",
        "    [3.1, 4.9, -2.5, 10.3, -4.2]\n",
        ")"
      ],
      "metadata": {
        "id": "zKbO_5Mp8xUA"
      },
      "execution_count": 68,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Solution\n",
        "# Run the data cell before running this\n",
        "w = np.linalg.inv(X.T @ X) @ X.T @ y\n",
        "print(round(np.sum(w)))"
      ],
      "metadata": {
        "id": "SiOulRYgA8LX",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 339
        },
        "outputId": "05b88a2e-edca-4c5f-d433-05279ca1ae12"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "error",
          "ename": "LinAlgError",
          "evalue": "Singular matrix",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mLinAlgError\u001b[0m                               Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-69-4bcb869b8d16>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Solution\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# Run the data cell before running this\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mw\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinalg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m \u001b[0;34m@\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m@\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m \u001b[0;34m@\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mround\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/numpy/linalg/linalg.py\u001b[0m in \u001b[0;36minv\u001b[0;34m(a)\u001b[0m\n\u001b[1;32m    559\u001b[0m     \u001b[0msignature\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'D->D'\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0misComplexType\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m'd->d'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    560\u001b[0m     \u001b[0mextobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_linalg_error_extobj\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_raise_linalgerror_singular\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 561\u001b[0;31m     \u001b[0mainv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_umath_linalg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msignature\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mextobj\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mextobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    562\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mwrap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mainv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult_t\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    563\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/numpy/linalg/linalg.py\u001b[0m in \u001b[0;36m_raise_linalgerror_singular\u001b[0;34m(err, flag)\u001b[0m\n\u001b[1;32m    110\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    111\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_raise_linalgerror_singular\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflag\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 112\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mLinAlgError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Singular matrix\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    113\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    114\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_raise_linalgerror_nonposdef\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflag\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mLinAlgError\u001b[0m: Singular matrix"
          ]
        }
      ]
    }
  ]
}